//cycle dectection in undirected graph using DFS
#include<unordered_map>
#include<list>
#include<queue>
bool cycleBFS(int node,unordered_map<int,bool> &vis,unordered_map<int,list<int>> &adj)
{
    unordered_map<int,int> parent;
    queue<int> q;
    q.push(node);
    vis[node]=true;
    parent[node]=-1;

    while(!q.empty())
    {
        int front=q.front();
        q.pop();

        for(auto neigbour:adj[front])
        {
            if(vis[neigbour] == true && neigbour != parent[front])
            {
                return true;
            }
            else if(!vis[neigbour])
            {
                q.push(neigbour);
                vis[neigbour]=true;
                parent[neigbour]=front;
            }
        }
        
    }
    return false;
}

bool cycleDFS(int node,int parent,unordered_map<int,bool> & vis,unordered_map<int,list<int>> & adj)
{
    vis[node]=true;
    for(auto neigbour : adj[node])
    {
        if(!vis[neigbour])
        {
            bool iscycle=cycleDFS(neigbour,node,vis,adj);
            if(iscycle)
            {
                return true;
            }
        }    
        else if(neigbour!=parent)
        {
            return true;
            
        }

    }
    return false;
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.

    unordered_map<int,list<int>> adj;
    for(int i=0;i<edges.size();i++)
    {
        int u=edges[i][0];
        int v=edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    unordered_map<int,bool> vis;
    for(int i=0;i<n;i++)
    {
        if(!vis[i])
        {
           // bool ans=cycleBFS(i,vis,adj);
           bool ans=cycleDFS(i,-1,vis,adj);
            if(ans)
            {
                return "Yes";
            }
        }
    }
    return "No";
}
