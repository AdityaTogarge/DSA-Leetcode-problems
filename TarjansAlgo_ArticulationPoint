// Articulation Point in a Graph using Tarjan's Algorithm
//Articulation Point: A vertex which when removed increases the number of connected components in a graph.
#include<iostream>
#include<list>
#include<unordered_map>
#include<limits.h>
#include<vector>    
using namespace std;

void DFS(int node,unordered_map<int,list<int>> &adj,unordered_map<int,bool> &visited,vector<int> &disc,vector<int> &low,int parent,vector<int> &ap,int &timer)
{
    visited[node]=true;
    disc[node]=low[node]=timer++;
    int child=0;

    for(auto nbr:adj[node])
    {
        if(nbr==parent)
        {
            continue;
        }
        if(!visited[nbr])
        {
            DFS(nbr,adj,visited,disc,low,node,ap,timer);
            low[node]=min(low[node],low[nbr]);

            //Articulation Point Check
            if(low[nbr]>=disc[node] && parent!=-1)
            {
                ap[node]=1;
            }
            child++;
        }
        else
        {
            low[node]=min(low[node],disc[nbr]);
        }
    }

    if(parent==-1 && child>1)
    {
        ap[node]=1;   
    }
    
}

int main()
{
    vector<pair<int,int>> edges;
    edges.push_back({0,3});
    edges.push_back({3,4});
    edges.push_back({0,4});
    edges.push_back({0,1});
    edges.push_back({1,2});

    unordered_map<int,list<int>> adj;

    for(int i=0;i<edges.size();i++)
    {
        int u=edges[i].first;
        int v=edges[i].second;

        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    int n=5;
    int timer=0;
    unordered_map<int,bool> visited;
    vector<int> disc(n,0);
    vector<int> low(n,0);
    int parent=-1;
    vector<int> ap(n,0); // articulation point

    for(int i=0;i<n;i++)
    {
        if(!visited[i])
        {
            DFS(i,adj,visited,disc,low,parent,ap,timer);
        }
    }

    for(int i=0;i<ap.size();i++)
    {
        if(ap[i]==1)
        {
            cout<<i<<" ";
        }
    }



}
